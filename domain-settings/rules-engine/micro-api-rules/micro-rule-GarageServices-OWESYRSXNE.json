{"type":15,"data":{"domainKey":"OWESYRSXNE","name":"GarageServices","desc":null,"code":"\r\nimport io.boodskap.iot.MicroApi;\r\nimport groovy.json.JsonSlurper;\r\n      \r\n//Garage List API\r\n@MicroApi(\r\n          desc = \"Garage List API Service\",\r\n          params = [\"domain_key\"],\r\n          types = [\"string\"], // if declared, make sure it matches the params[]\r\n          required = [],\r\n          roles = [], // domain roles, empty roles for open access\r\n          slug = \"\" // optional short name for REST API access\r\n)\r\ndef list(def args) {\r\n\r\n    def response = [reqStatus:false];\r\n    \r\n    def jsonSlurper = new JsonSlurper();\r\n    \r\n    try{\r\n        def result = record.search(2000,'{ \"from\": 0, \"size\": 10 }');\r\n            response['reqStatus'] = true;\r\n            response['result'] = result;\r\n        \r\n    }catch(Exception ex){\r\n        failure.insert(\"Exception occured => %s\",ex.toString());\r\n        response['error'] = ex;\r\n    }finally{\r\n         return response;\r\n    }\r\n}\r\n      \r\n//Garage Create API\r\n@MicroApi(\r\n          desc = \"Garage Create API Service\",\r\n          params = [\"req_data\"],\r\n          types = [\"string\"], // if declared, make sure it matches the params[]\r\n          required = [],\r\n          roles = [], // domain roles, empty roles for open access\r\n          slug = \"\" // optional short name for REST API access\r\n)\r\ndef create(def args) {\r\n\r\n    def response = [reqStatus:false];\r\n    \r\n    def jsonSlurper = new JsonSlurper();\r\n    \r\n    try{\r\n        def inputObj = jsonSlurper.parseText(args.req_data);\r\n        def Id = util.uuid().toString();\r\n        def result = record.insert(2000, Id, inputObj);\r\n        \r\n        for(int i=1; i<=inputObj.parking_row; i++){\r\n            for(int j=1; j<=inputObj.single_row_lots; j++){\r\n                \r\n                def lot_obj = [:];\r\n                lot_obj[\"distance\"] = inputObj.single_lot_length;\r\n                lot_obj[\"garage_id\"] = Id;\r\n                lot_obj[\"garage_name\"] = inputObj.garage_name;\r\n                lot_obj[\"gwid\"] = 0;\r\n                lot_obj[\"lot_sid\"] = \"ROW\"+i+\"COL\"+j;\r\n                lot_obj[\"created_by\"] = inputObj.created_by;\r\n                lot_obj[\"created_time\"] = inputObj.created_time;\r\n                lot_obj[\"updated_by\"] = inputObj.updated_by;\r\n                lot_obj[\"updated_time\"] = inputObj.updated_time;\r\n                \r\n                log.info(\"lot insert => %s\",lot_obj)\r\n                def lot_id = util.uuid().toString();\r\n                record.insert(2001, lot_id, lot_obj);\r\n            }\r\n        }\r\n    \r\n        response['result'] = \"Garage created successfully!\";\r\n        response['reqStatus'] = true;\r\n        \r\n    }catch(Exception ex){\r\n        failure.insert(\"Exception occured => %s\",ex.toString());\r\n        response['error'] = ex;\r\n    }finally{\r\n         return response;\r\n    }\r\n}\r\n\r\n      \r\n//Garage Update API\r\n@MicroApi(\r\n          desc = \"Garage Update API Service\",\r\n          params = [\"req_data\",\"id\"],\r\n          types = [\"string\",\"string\"], // if declared, make sure it matches the params[]\r\n          required = [],\r\n          roles = [], // domain roles, empty roles for open access\r\n          slug = \"\" // optional short name for REST API access\r\n)\r\ndef update(def args) {\r\n\r\n    def response = [reqStatus:false];\r\n    \r\n    def jsonSlurper = new JsonSlurper();\r\n    \r\n    try{\r\n        def Id = args.id;\r\n        if(Id != \"\"){\r\n            def updateObj = jsonSlurper.parseText(args.req_data);\r\n            def inputCheck = record.get(2000, Id);\r\n            \r\n            if(inputCheck != null){\r\n                record.insert(2000, Id, updateObj); \r\n                response['result'] = \"Garage updated successfully!\";\r\n                response['reqStatus'] = true;\r\n            }else{\r\n                response['message'] = \"Garage not found!\";\r\n                response['reqStatus'] = false;\r\n            }\r\n        }else{\r\n                response['message'] = \"Garage ID missing\";\r\n                response['reqStatus'] = false;\r\n        }\r\n    }catch(Exception ex){\r\n        failure.insert(\"Exception occured => %s\",ex.toString());\r\n        response['error'] = ex;\r\n    }finally{\r\n         return response;\r\n    }\r\n}\r\n\r\n\r\n      \r\n//Garage Delete API\r\n@MicroApi(\r\n          desc = \"Garage Delete API Service\",\r\n          params = [\"id\"],\r\n          types = [\"string\"], // if declared, make sure it matches the params[]\r\n          required = [],\r\n          roles = [], // domain roles, empty roles for open access\r\n          slug = \"\" // optional short name for REST API access\r\n)\r\ndef delete(def args) {\r\n\r\n    def response = [reqStatus:false];\r\n    \r\n    def jsonSlurper = new JsonSlurper();\r\n    \r\n    try{\r\n        def Id = args.id;\r\n        if(Id != \"\"){\r\n            \r\n           def inputCheck = record.get(2000, Id);\r\n           log.info(\"Garage details => %s\",inputCheck);\r\n            \r\n            if(inputCheck != null){\r\n                \r\n                def inputCheckTwo = record.search(2001,'{\"query\":{\"bool\":{\"must\":{\"match\":{\"garage_id\":\"'+Id+'\"}}}},\"size\":1000}');\r\n                log.info(\"Lot details => %s\",inputCheckTwo);\r\n                \r\n                if(inputCheckTwo.hits.total.value > 0){\r\n                    for(int i=0;i<inputCheckTwo.hits.total.value;i++){\r\n                        def lot_id = inputCheckTwo.hits.hits[i]._id;\r\n                        def resultObj = record.delete(2001, lot_id);\r\n                        log.info(\"Lot deleted successfully => %s\",lot_id);\r\n                    }\r\n                }\r\n                    \r\n                def garage_del_result = record.delete(2000, Id);\r\n                response['result'] = \"Garage deleted successfully!\";\r\n                response['reqStatus'] = true;\r\n               \r\n            }else{\r\n                response['message'] = \"Garage not found !\";\r\n                response['reqStatus'] = false;\r\n            }\r\n        }else{\r\n                response['message'] = \"Garage ID missing\";\r\n                response['reqStatus'] = false;\r\n        }\r\n    }catch(Exception ex){\r\n        failure.insert(\"Exception occured => %s\",ex.toString());\r\n        response['error'] = ex;\r\n    }finally{\r\n         return response;\r\n    }\r\n}","authType":"TOKEN","apiKey":null,"props":null,"createdStamp":1670955877865,"updatedStamp":1671081909472,"createdBy":"bob@kstechnologies.com","updatedBy":"bob@kstechnologies.com","allowedMethods":null,"methods":[{"name":"update","desc":"Garage Update API Service","slug":"update","params":[{"name":"req_data","type":"string","required":true},{"name":"id","type":"string","required":true}],"roles":[]},{"name":"list","desc":"Garage List API Service","slug":"list","params":[{"name":"domain_key","type":"string","required":true}],"roles":[]},{"name":"delete","desc":"Garage Delete API Service","slug":"delete","params":[{"name":"id","type":"string","required":true}],"roles":[]},{"name":"create","desc":"Garage Create API Service","slug":"create","params":[{"name":"req_data","type":"string","required":true}],"roles":[]}]}}